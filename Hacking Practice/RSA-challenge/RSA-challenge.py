__author__ = "Casper Kristiansson"

import random
import libnum
import gmpy2


ENCRYPTED_MESSAGE = 13072805103734050196763819789566626691247493832686521268714312689603308098706022694486371727303009112641714603446955706549530358893437748029701759247006402284455180500784205214564147985129624758845894069582422015450278669411728613255246617748489467721759810582049774563665806407367033329952688390434549716853006069864513684454648560795266492461774234791373979861110887886611592311969671013335284445897063887577707202472887847215812888439197704964575188351669171517784583768033344727487895047859746515129677853762542774031928518100843315871063879788489573635226711485914195404910597515792533687911894036202196422700296

N = 26609708421376677628454402900087009846291167287676911113310671001067916215975654619357943078675057781284419971876364188201285756254849493795101184689472972451252559267516902582277554505702670110528791300961267369272080284734306320521513748467464633545459859474195548892296577923424451509458569436363709731402197392186162426572460924170144815459280292038798573517240473723212917475994555278140089160884080770934882248855992019482512867322735936930918031567624003424284507526700957286437082738893899468444943650565398213516262653534101927337725614414267105976588592783298584640344155571836662897588729868409203459117059
E = 65537
CRY = 26609708421376677628454402900087009846291167287676911113310671001067916215975654619357943078675057781284419971876364188201285756254849493795101184689472972451252559267516902582277554505702670110528791300961267369272080284734306320521513748467464633545459859474195548892296577923424451509458569436363709731572253846238252647161985685432295738082766877396752019943012580636589164644125010073946413108951305564059881537794476457602047138719485228161010739405064157783241778448944470473298163156034126054406807297456937129548816176179704045207131224909988357244665869859061263890702529905040557579134990132844969289396259
# Note that Cry=(p+520)*(q+520), and n = p*q

def calculate_pq():
    """
    CRY = (p+520)*(q+520) = pq + 520p + 520q + 270400, pq = N ->
    520p + 520q + 270400 + N = CRY

    q = CRY-520p-N-270400/520
    p*q = N
    N = p(CRY-520p-N-270400/520)

    p + q = 327031642407865808826009156273367158891320356457602781588023282525723552246404720761166007592436970756009614017189393150229873598839902483134793668918154142997994751773545217667040539263731204973003583936329882530831833697395388688210395404799463944746302455914928229327612258333084412849127423585453395826940
    """
    """
    p + q = x
    p = N/q
    p = N/(x-p)
    p = N/x + N/p - N/xp

    
    """

    q = 174816943388029313922461778471297267056160230782548116914892482777359083688083315800864182079388371325849126802447965512624271162100219847126831485190468723167866716755159108686734034616419355464166944965939180404063851727736019982642612411913221729885277241425134083768886618528232702478214220202380101176191
    p = 152214699019836494903547377802069891835160125675054664673130799748364468558321404960301825513048599430160487214741427637605602436739682636007962183727685419830128035018386108980306504647311849508836638970390702126767981969659368705567782992886242214861025214489794145558725639804851710370913203383073294650749


    return p, q


def example_encryption(m):
    rand = random.randint(0, 30)
    
    m = libnum.s2n(m)
    c1 = m**rand
    c2 = gmpy2.powmod(c1, E, N)
    c3 = gmpy2.powmod(c2, E, CRY)

    print('Encrypted Message:', int(c3))

    return c3


def example_decryption(c):
    p, q = calculate_pq()
    d = libnum.invmod(E, (p-1)*(q-1))
    d1 = libnum.invmod(E, (p+520-1)*(q+520-1))


    c = gmpy2.powmod(c, d1, CRY)
    c = gmpy2.powmod(c, d, N)

    for i in range(1, 30):
        m, exists = gmpy2.iroot(c, i)
        if exists:
            print('Decrypted Message:', libnum.n2s(int(m)))


def main():
    m = '***'                               # Note that the message is unkonwn, you need to get it from the encrypted message
    c = example_encryption(m)
    example_decryption(c)
    example_decryption(ENCRYPTED_MESSAGE)



if __name__ in "__main__":
    main()
